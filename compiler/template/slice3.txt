void stop(int sig){
	exit(0);
}
main (int argc, char *argv[])
{
	int    i, len, rc, on = 1;
	int    listen_sd, max_sd;
	int    desc_ready, end_server;
	char   buffer[MAX_PACKET_SIZE];
	struct sockaddr_in   addr;
	struct timeval       timeout;
	fd_set        master_set, working_set;
    Flow f;
    int new_sd,_tpt;

	signal(SIGINT,stop);

    _init_();

	listen_sd = socket(AF_INET, SOCK_STREAM, 0);
	if (listen_sd < 0)
	{
		perror("socket() failed");
		exit(-1);
	}
	rc = setsockopt(listen_sd, SOL_SOCKET,  SO_REUSEADDR,
			(char *)&on, sizeof(on));
	if (rc < 0)
	{
		perror("setsockopt() failed");
		close(listen_sd);
		exit(-1);
	}
	rc = ioctl(listen_sd, FIONBIO, (char *)&on);
	if (rc < 0)
	{
		perror("ioctl() failed");
		close(listen_sd);
		exit(-1);
	}

	memset(&addr, 0, sizeof(addr));
	addr.sin_family      = AF_INET;
	inet_pton(AF_INET, SERVER_ADDR , &addr.sin_addr);
	addr.sin_port        = htons(SERVER_PORT);
	rc = bind(listen_sd,
			(struct sockaddr *)&addr, sizeof(addr));
	if (rc < 0)
	{
		perror("bind() failed");
		close(listen_sd);
		exit(-1);
	}

	rc = listen(listen_sd, 32);
	if (rc < 0)
	{
		perror("listen() failed");
		close(listen_sd);
		exit(-1);
	}

	FD_ZERO(&master_set);
	max_sd = listen_sd;
	FD_SET(listen_sd, &master_set);

	timeout.tv_sec  = 0;
	timeout.tv_usec = 0;


	do
	{
		memcpy(&working_set, &master_set, sizeof(master_set));

		rc = select(max_sd + 1, &working_set, NULL, NULL, &timeout);
		if (rc < 0)
		{
			perror("  select() failed");
			break;
		}
		if (rc == 0)
		{
			sleep(1);
			continue;
		}
		desc_ready = rc;
		for (i=0; i <= max_sd  &&  desc_ready > 0; ++i)
		{
			if (FD_ISSET(i, &working_set))
			{
